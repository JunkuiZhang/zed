pub(crate) enum ScanCode {
    A, // A key on standard US layout
    B, // B
    C, // C
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Tilde, // `
    Digital1,
    Digital2,
    Digital3,
    Digital4,
    Digital5,
    Digital6,
    Digital7,
    Digital8,
    Digital9,
    Digital0,
    Minus, // -
    Equal,
    BracketLeft,
    BracketRight,
    Backslash,
    Semicolon,
    Quote,
    Comma,
    Period,
    Slash,
    Other(u32),
}

impl ScanCode {
    pub(crate) fn from_keystroke(keystroke: &str) -> Option<Self> {
        match keystroke {
            "a" => Some(Self::A),
            "b" => Some(Self::B),
            "c" => Some(Self::C),
            "d" => Some(Self::D),
            "e" => Some(Self::E),
            "f" => Some(Self::F),
            "g" => Some(Self::G),
            "h" => Some(Self::H),
            "i" => Some(Self::I),
            "j" => Some(Self::J),
            "k" => Some(Self::K),
            "l" => Some(Self::L),
            "`" => Some(Self::Tilde),
            "-" => Some(Self::Minus),
            "=" => Some(Self::Equal),
            "[" => Some(Self::BracketLeft),
            "]" => Some(Self::BracketRight),
            "\\" => Some(Self::Backslash),
            ";" => Some(Self::Semicolon),
            "'" => Some(Self::Quote),
            "," => Some(Self::Comma),
            "." => Some(Self::Period),
            "/" => Some(Self::Slash),
            _ => None,
        }
    }
}
